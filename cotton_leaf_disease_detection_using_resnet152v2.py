# -*- coding: utf-8 -*-
"""COTTON LEAF DISEASE DETECTION USING ResNet152V2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ul82khVk9YM8pu-U1e-aaiCu8LT_d-4h

# **Title :** **COTTON LEAF DISEASE DETECTION USING ResNet152V2** 


*  **Meraz Hossain** || ID : 19301152


Project Report : Click here

Please download the dataset from the below Link : [Click here](https://drive.google.com/drive/folders/12y2JpT2q_qUN6cKqmVT60GJ_9ike6ynS?usp=sharing)

# Mounting Google Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Importing Libraries"""

from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession
config = ConfigProto()
config.gpu_options.per_process_gpu_memory_fraction = 0.2
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob

"""# Re-sizing all the Images to [ 224 ,224 ]"""

IMAGE_SIZE = [224, 224]
train_path = '/content/drive/MyDrive/Datasets/train'
valid_path = '/content/drive/MyDrive/Datasets/test'

"""# Importing RESNET152V2"""

import tensorflow 
resnet152V2 =tensorflow.keras.applications.ResNet152V2(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

#Don't train existing weights
for layer in resnet152V2.layers:
    layer.trainable = False

folders = glob('/content/drive/MyDrive/Datasets/train/*')

"""# Flattening"""

x = Flatten()(resnet152V2.output)

"""# Using Softmax"""

prediction = Dense(len(folders), activation='softmax')(x)
model = Model(inputs=resnet152V2.input, outputs=prediction)

"""# Viewing the structure of the model"""

model.summary()

model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

"""# Using the Image Data Generator to import the images from the dataset"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)
test_datagen = ImageDataGenerator(rescale = 1./255)

# Make sure you provide the same target size as initialied for the image size
training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/Datasets/train',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/Datasets/test',
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=20,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

"""**We are getting almost 98% acuracy.**"""

import matplotlib.pyplot as plt

"""***Plotting the Loss & Accuracy***"""

# For Loss
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')
# Plot Accuracy
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

"""**Saving it as H5 file.**"""

# save it as a h5 file
from tensorflow.keras.models import load_model
model.save('model_resnet152V2.h5')

y_pred = model.predict(test_set)

y_pred

import numpy as np
y_pred = np.argmax(y_pred, axis=1)

y_pred

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

model=load_model('model_resnet152V2.h5')

"""# Checking Images

"""

img_data

img=image.load_img('/content/drive/MyDrive/Datasets/test/fresh cotton plant/dsd (223).jpg',target_size=(224,224))

x=image.img_to_array(img)
x

x.shape

x=x/255

import numpy as np
x=np.expand_dims(x,axis=0)
img_data=preprocess_input(x)
img_data.shape

model.predict(img_data)

a=np.argmax(model.predict(img_data), axis=1)

a==1

import tensorflow as tf

tf.__version__

"""# Conclusion : 

To sum up , this work is conclusive in demonstrating how ResNet152V2 can be used to help farmers fight cotton leaf disease. Work on diversifying training datasets and testing with similar web applications in real-world scenarios should begin soon. The fight against plant diseases would continue in the absence of such practical advances. As a result, many crop productivity losses are occurring.
"""